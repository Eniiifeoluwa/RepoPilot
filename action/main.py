import os
import json
import requests
import time
from transformers import pipeline, logging

# --- Suppress warnings ---
logging.set_verbosity_error()

# --- Environment setup ---
EVENT_PATH = os.getenv("GITHUB_EVENT_PATH")
REPO = os.getenv("GITHUB_REPOSITORY")
TOKEN = os.getenv("GITHUB_TOKEN")
DASHBOARD_URL = os.getenv("DASHBOARD_URL", "").strip()

HF_HOME = os.getenv("HF_HOME", "/tmp/hf_home")
os.environ.setdefault("HF_HOME", HF_HOME)
os.environ.setdefault("TRANSFORMERS_CACHE", HF_HOME)

if not EVENT_PATH or not REPO or not TOKEN:
    exit(0)

# --- Load GitHub Event Payload ---
with open(EVENT_PATH, "r", encoding="utf-8") as f:
    event = json.load(f)

# --- Determine event type ---
etype = "issue"  # default
obj = None

# Check if payload is a Pull Request
if "pull_request" in event and event["pull_request"]:
    pr_obj = event["pull_request"]
    if "head" in pr_obj and "base" in pr_obj:
        etype = "pull_request"
        obj = pr_obj

# If not PR, check for real Issue (not a PR masquerading)
if etype == "issue" and "issue" in event and event["issue"]:
    issue_obj = event["issue"]
    if not issue_obj.get("pull_request"):  # real issue
        obj = issue_obj
    else:
        # Ignore issues that are actually PRs
        exit(0)

if not obj:
    exit(0)

number = obj.get("number", 0)
title = obj.get("title", "") or ""
body = obj.get("body", "") or ""

print(f"DEBUG: Detected {etype} #{number} - '{title[:50]}...'")

# --- Prepare text ---
text = (title + "\n\n" + body).strip()
if not text:
    text = "(empty)"

txt_for_sum = text[:1500]
txt_for_cls = text[:1200]
summary_prompt = f"""
Summarize the following GitHub issue in 1-2 sentences.
Focus on the **core problem or request**, ignore minor details.

Issue:
{txt_for_sum}
"""

cls_prompt = f"""
You are the best AI that categorizes GitHub issues, and I am sure. 
Identify the issue.     
Here is the issue text:
{txt_for_cls}
"""

# --- Load Models ---
SUM_MODEL = "sshleifer/distilbart-cnn-6-6"
CLS_MODEL = "typeform/distilbert-base-uncased-mnli"

try:
    summarizer = pipeline("summarization", model=SUM_MODEL, device=-1)
except Exception:
    summarizer = pipeline("summarization", model=SUM_MODEL)

try:
    classifier = pipeline("zero-shot-classification", model=CLS_MODEL, device=-1)
except Exception:
    classifier = pipeline("zero-shot-classification", model=CLS_MODEL)

labels = ["bug", "feature", "documentation", "question", "enhancement", "refactor", "test", "ci", "security"]

# --- Helper: safe POST ---
def safe_post(url, headers, payload, retries=2, timeout=10):
    for _ in range(retries + 1):
        try:
            return requests.post(url, headers=headers, json=payload, timeout=timeout)
        except Exception:
            time.sleep(1)
    return None

# --- Summarize ---
try:
    s = summarizer(summary_prompt, max_length=80, min_length=20, do_sample=False)
    summary = s[0]["summary_text"].strip()
except Exception:
    summary = txt_for_sum[:280] + ("..." if len(txt_for_sum) > 280 else "")

# --- Classify ---
try:
    pred = classifier(prompt, labels, multi_label=False)
    top_label = pred["labels"][0]
    score = float(pred["scores"][0])
except Exception:
    top_label = "question"
    score = 0.0

# --- Confidence description ---
def confidence_to_words(score: float) -> str:
    percent = score * 100
    if percent >= 80:
        return "I am very confident"
    elif percent >= 60:
        return "I am confident"
    elif percent >= 40:
        return "I am somewhat confident"
    elif percent >= 15:
        return "I am a bit confident"
    else:
        return "I am unsure"

confidence_words = confidence_to_words(score)

# --- Comment to GitHub ---
comment = f"""
### 🤖 RepoPilot Report

**📝 Summary**  
{summary}

## 📂 🎯 Predicted Category  
### 🟢 **This is most likely a {top_label.upper()} {etype.capitalize()}.**  
{confidence_words} with this prediction ({score * 100:.2f}% confidence).

**💡 Suggested Next Steps**  
- If this is a bug: try reproducing with minimal setup, then check logs.  
- If this is a feature request: clarify expected behavior and update docs.  
- If this is documentation: verify links, grammar, and completeness.  

**⚙️ Notes**  
This analysis was auto-generated by an AI workflow. Please verify before acting.
"""

headers = {
    "Authorization": f"token {TOKEN}",
    "Accept": "application/vnd.github+json"
}

# Post comment
try:
    post_url = f"https://api.github.com/repos/{REPO}/issues/{number}/comments"
    requests.post(post_url, headers=headers, json={"body": comment}, timeout=10)
except Exception:
    pass

# Add label
try:
    label_url = f"https://api.github.com/repos/{REPO}/issues/{number}/labels"
    requests.post(label_url, headers=headers, json={"labels": [top_label]}, timeout=10)
except Exception:
    pass

# Push to Dashboard
if DASHBOARD_URL:
    try:
        payload = {
            "repo": REPO,
            "number": number,
            "type": "Pull Request" if etype == "pull_request" else "issue",
            "summary": summary,
            "label": top_label,
            "score": score,
            "title": title
        }
        _ = safe_post(
            DASHBOARD_URL.rstrip("/") + "/ingest",
            headers={"Content-Type": "application/json"},
            payload=payload
        )
    except Exception:
        pass
